# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.price_full import PriceFull

class TestPriceFull(unittest.TestCase):
    """PriceFull unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PriceFull:
        """Test PriceFull
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PriceFull`
        """
        model = PriceFull()
        if include_optional:
            return PriceFull(
                id = 56,
                product_id = 56,
                location_id = 56,
                proof_id = 56,
                product = openapi_client.models.product_full.ProductFull(
                    id = 56, 
                    code = '', 
                    source = null, 
                    product_name = '', 
                    image_url = '', 
                    product_quantity = -2147483648, 
                    product_quantity_unit = '', 
                    categories_tags = [
                        ''
                        ], 
                    brands = '', 
                    brands_tags = [
                        ''
                        ], 
                    labels_tags = [
                        ''
                        ], 
                    nutriscore_grade = '', 
                    ecoscore_grade = '', 
                    nova_group = 0, 
                    unique_scans_n = 0, 
                    price_count = 0, 
                    location_count = 0, 
                    user_count = 0, 
                    proof_count = 0, 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                location = openapi_client.models.location.Location(
                    id = 56, 
                    osm_id = 0, 
                    osm_type = 'NODE', 
                    osm_name = '', 
                    osm_display_name = '', 
                    osm_tag_key = '', 
                    osm_tag_value = '', 
                    osm_address_postcode = '', 
                    osm_address_city = '', 
                    osm_address_country = '', 
                    osm_address_country_code = '', 
                    osm_lat = -10000, 
                    osm_lon = -10000, 
                    price_count = 0, 
                    user_count = 0, 
                    product_count = 0, 
                    proof_count = 0, 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                proof = openapi_client.models.proof.Proof(
                    id = 56, 
                    location_id = 56, 
                    file_path = '', 
                    mimetype = '', 
                    type = 'PRICE_TAG', 
                    image_thumb_path = '', 
                    location_osm_id = 0, 
                    location_osm_type = null, 
                    date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    currency = null, 
                    price_count = 0, 
                    owner = '', 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                product_code = '',
                product_name = '',
                category_tag = '',
                labels_tags = None,
                origins_tags = None,
                price = 0,
                price_is_discounted = True,
                price_without_discount = 0,
                price_per = None,
                currency = None,
                location_osm_id = 0,
                location_osm_type = None,
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                owner = '',
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return PriceFull(
                id = 56,
                product_id = 56,
                location_id = 56,
                proof_id = 56,
                product = openapi_client.models.product_full.ProductFull(
                    id = 56, 
                    code = '', 
                    source = null, 
                    product_name = '', 
                    image_url = '', 
                    product_quantity = -2147483648, 
                    product_quantity_unit = '', 
                    categories_tags = [
                        ''
                        ], 
                    brands = '', 
                    brands_tags = [
                        ''
                        ], 
                    labels_tags = [
                        ''
                        ], 
                    nutriscore_grade = '', 
                    ecoscore_grade = '', 
                    nova_group = 0, 
                    unique_scans_n = 0, 
                    price_count = 0, 
                    location_count = 0, 
                    user_count = 0, 
                    proof_count = 0, 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                location = openapi_client.models.location.Location(
                    id = 56, 
                    osm_id = 0, 
                    osm_type = 'NODE', 
                    osm_name = '', 
                    osm_display_name = '', 
                    osm_tag_key = '', 
                    osm_tag_value = '', 
                    osm_address_postcode = '', 
                    osm_address_city = '', 
                    osm_address_country = '', 
                    osm_address_country_code = '', 
                    osm_lat = -10000, 
                    osm_lon = -10000, 
                    price_count = 0, 
                    user_count = 0, 
                    product_count = 0, 
                    proof_count = 0, 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                proof = openapi_client.models.proof.Proof(
                    id = 56, 
                    location_id = 56, 
                    file_path = '', 
                    mimetype = '', 
                    type = 'PRICE_TAG', 
                    image_thumb_path = '', 
                    location_osm_id = 0, 
                    location_osm_type = null, 
                    date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    currency = null, 
                    price_count = 0, 
                    owner = '', 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testPriceFull(self):
        """Test PriceFull"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
