# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.paginated_product_full_list import PaginatedProductFullList

class TestPaginatedProductFullList(unittest.TestCase):
    """PaginatedProductFullList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedProductFullList:
        """Test PaginatedProductFullList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedProductFullList`
        """
        model = PaginatedProductFullList()
        if include_optional:
            return PaginatedProductFullList(
                count = 123,
                next = 'http://api.example.org/accounts/?page=4',
                previous = 'http://api.example.org/accounts/?page=2',
                results = [
                    openapi_client.models.product_full.ProductFull(
                        id = 56, 
                        code = '', 
                        source = null, 
                        product_name = '', 
                        image_url = '', 
                        product_quantity = -2147483648, 
                        product_quantity_unit = '', 
                        categories_tags = [
                            ''
                            ], 
                        brands = '', 
                        brands_tags = [
                            ''
                            ], 
                        labels_tags = [
                            ''
                            ], 
                        nutriscore_grade = '', 
                        ecoscore_grade = '', 
                        nova_group = 0, 
                        unique_scans_n = 0, 
                        price_count = 0, 
                        location_count = 0, 
                        user_count = 0, 
                        proof_count = 0, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return PaginatedProductFullList(
                count = 123,
                results = [
                    openapi_client.models.product_full.ProductFull(
                        id = 56, 
                        code = '', 
                        source = null, 
                        product_name = '', 
                        image_url = '', 
                        product_quantity = -2147483648, 
                        product_quantity_unit = '', 
                        categories_tags = [
                            ''
                            ], 
                        brands = '', 
                        brands_tags = [
                            ''
                            ], 
                        labels_tags = [
                            ''
                            ], 
                        nutriscore_grade = '', 
                        ecoscore_grade = '', 
                        nova_group = 0, 
                        unique_scans_n = 0, 
                        price_count = 0, 
                        location_count = 0, 
                        user_count = 0, 
                        proof_count = 0, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )
        """

    def testPaginatedProductFullList(self):
        """Test PaginatedProductFullList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
