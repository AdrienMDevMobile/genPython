# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.patched_price_update_currency import PatchedPriceUpdateCurrency
from openapi_client.models.patched_price_update_price_per import PatchedPriceUpdatePricePer
from openapi_client.models.price_create_location_osm_type import PriceCreateLocationOsmType
from typing import Optional, Set
from typing_extensions import Self

class PriceCreate(BaseModel):
    """
    PriceCreate
    """ # noqa: E501
    price: Optional[Union[Annotated[float, Field(lt=100000000, strict=True, ge=0)], Annotated[int, Field(lt=100000000, strict=True, ge=0)]]] = None
    price_is_discounted: Optional[StrictBool] = None
    price_without_discount: Optional[Union[Annotated[float, Field(lt=100000000, strict=True, ge=0)], Annotated[int, Field(lt=100000000, strict=True, ge=0)]]] = None
    price_per: Optional[PatchedPriceUpdatePricePer] = None
    currency: Optional[PatchedPriceUpdateCurrency] = None
    var_date: Optional[date] = Field(default=None, alias="date")
    product_code: Optional[StrictStr] = None
    product_name: Optional[StrictStr] = None
    category_tag: Optional[StrictStr] = None
    labels_tags: Optional[Any] = None
    origins_tags: Optional[Any] = None
    location_osm_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=0)]] = None
    location_osm_type: Optional[PriceCreateLocationOsmType] = None
    proof_id: StrictInt
    __properties: ClassVar[List[str]] = ["price", "price_is_discounted", "price_without_discount", "price_per", "currency", "date", "product_code", "product_name", "category_tag", "labels_tags", "origins_tags", "location_osm_id", "location_osm_type", "proof_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_per
        if self.price_per:
            _dict['price_per'] = self.price_per.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_osm_type
        if self.location_osm_type:
            _dict['location_osm_type'] = self.location_osm_type.to_dict()
        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if price_is_discounted (nullable) is None
        # and model_fields_set contains the field
        if self.price_is_discounted is None and "price_is_discounted" in self.model_fields_set:
            _dict['price_is_discounted'] = None

        # set to None if price_without_discount (nullable) is None
        # and model_fields_set contains the field
        if self.price_without_discount is None and "price_without_discount" in self.model_fields_set:
            _dict['price_without_discount'] = None

        # set to None if price_per (nullable) is None
        # and model_fields_set contains the field
        if self.price_per is None and "price_per" in self.model_fields_set:
            _dict['price_per'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if product_code (nullable) is None
        # and model_fields_set contains the field
        if self.product_code is None and "product_code" in self.model_fields_set:
            _dict['product_code'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['product_name'] = None

        # set to None if category_tag (nullable) is None
        # and model_fields_set contains the field
        if self.category_tag is None and "category_tag" in self.model_fields_set:
            _dict['category_tag'] = None

        # set to None if labels_tags (nullable) is None
        # and model_fields_set contains the field
        if self.labels_tags is None and "labels_tags" in self.model_fields_set:
            _dict['labels_tags'] = None

        # set to None if origins_tags (nullable) is None
        # and model_fields_set contains the field
        if self.origins_tags is None and "origins_tags" in self.model_fields_set:
            _dict['origins_tags'] = None

        # set to None if location_osm_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_osm_id is None and "location_osm_id" in self.model_fields_set:
            _dict['location_osm_id'] = None

        # set to None if location_osm_type (nullable) is None
        # and model_fields_set contains the field
        if self.location_osm_type is None and "location_osm_type" in self.model_fields_set:
            _dict['location_osm_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "price": obj.get("price"),
            "price_is_discounted": obj.get("price_is_discounted"),
            "price_without_discount": obj.get("price_without_discount"),
            "price_per": PatchedPriceUpdatePricePer.from_dict(obj["price_per"]) if obj.get("price_per") is not None else None,
            "currency": PatchedPriceUpdateCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "date": obj.get("date"),
            "product_code": obj.get("product_code"),
            "product_name": obj.get("product_name"),
            "category_tag": obj.get("category_tag"),
            "labels_tags": obj.get("labels_tags"),
            "origins_tags": obj.get("origins_tags"),
            "location_osm_id": obj.get("location_osm_id"),
            "location_osm_type": PriceCreateLocationOsmType.from_dict(obj["location_osm_type"]) if obj.get("location_osm_type") is not None else None,
            "proof_id": obj.get("proof_id")
        })
        return _obj


