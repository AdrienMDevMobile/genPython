# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.patched_price_update_currency import PatchedPriceUpdateCurrency
from openapi_client.models.price_create_location_osm_type import PriceCreateLocationOsmType
from openapi_client.models.type_enum import TypeEnum
from typing import Optional, Set
from typing_extensions import Self

class Proof(BaseModel):
    """
    Proof
    """ # noqa: E501
    id: StrictInt
    location_id: StrictInt
    file_path: Optional[StrictStr] = None
    mimetype: Optional[StrictStr] = None
    type: TypeEnum
    image_thumb_path: Optional[StrictStr] = None
    location_osm_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=0)]] = None
    location_osm_type: Optional[PriceCreateLocationOsmType] = None
    var_date: Optional[date] = Field(default=None, alias="date")
    currency: Optional[PatchedPriceUpdateCurrency] = None
    price_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    owner: Optional[StrictStr] = None
    created: Optional[datetime] = None
    updated: datetime
    __properties: ClassVar[List[str]] = ["id", "location_id", "file_path", "mimetype", "type", "image_thumb_path", "location_osm_id", "location_osm_type", "date", "currency", "price_count", "owner", "created", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proof from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location_osm_type
        if self.location_osm_type:
            _dict['location_osm_type'] = self.location_osm_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # set to None if file_path (nullable) is None
        # and model_fields_set contains the field
        if self.file_path is None and "file_path" in self.model_fields_set:
            _dict['file_path'] = None

        # set to None if mimetype (nullable) is None
        # and model_fields_set contains the field
        if self.mimetype is None and "mimetype" in self.model_fields_set:
            _dict['mimetype'] = None

        # set to None if image_thumb_path (nullable) is None
        # and model_fields_set contains the field
        if self.image_thumb_path is None and "image_thumb_path" in self.model_fields_set:
            _dict['image_thumb_path'] = None

        # set to None if location_osm_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_osm_id is None and "location_osm_id" in self.model_fields_set:
            _dict['location_osm_id'] = None

        # set to None if location_osm_type (nullable) is None
        # and model_fields_set contains the field
        if self.location_osm_type is None and "location_osm_type" in self.model_fields_set:
            _dict['location_osm_type'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if price_count (nullable) is None
        # and model_fields_set contains the field
        if self.price_count is None and "price_count" in self.model_fields_set:
            _dict['price_count'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proof from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "location_id": obj.get("location_id"),
            "file_path": obj.get("file_path"),
            "mimetype": obj.get("mimetype"),
            "type": obj.get("type"),
            "image_thumb_path": obj.get("image_thumb_path"),
            "location_osm_id": obj.get("location_osm_id"),
            "location_osm_type": PriceCreateLocationOsmType.from_dict(obj["location_osm_type"]) if obj.get("location_osm_type") is not None else None,
            "date": obj.get("date"),
            "currency": PatchedPriceUpdateCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "price_count": obj.get("price_count"),
            "owner": obj.get("owner"),
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        return _obj


