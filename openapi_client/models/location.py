# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.location_osm_type_enum import LocationOsmTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    Location
    """ # noqa: E501
    id: StrictInt
    osm_id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=0)]
    osm_type: LocationOsmTypeEnum
    osm_name: Optional[StrictStr] = None
    osm_display_name: Optional[StrictStr] = None
    osm_tag_key: Optional[StrictStr] = None
    osm_tag_value: Optional[StrictStr] = None
    osm_address_postcode: Optional[StrictStr] = None
    osm_address_city: Optional[StrictStr] = None
    osm_address_country: Optional[StrictStr] = None
    osm_address_country_code: Optional[StrictStr] = None
    osm_lat: Optional[Union[Annotated[float, Field(lt=10000, strict=True, gt=-10000)], Annotated[int, Field(lt=10000, strict=True, gt=-10000)]]] = None
    osm_lon: Optional[Union[Annotated[float, Field(lt=10000, strict=True, gt=-10000)], Annotated[int, Field(lt=10000, strict=True, gt=-10000)]]] = None
    price_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    user_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    product_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    proof_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    created: Optional[datetime] = None
    updated: datetime
    __properties: ClassVar[List[str]] = ["id", "osm_id", "osm_type", "osm_name", "osm_display_name", "osm_tag_key", "osm_tag_value", "osm_address_postcode", "osm_address_city", "osm_address_country", "osm_address_country_code", "osm_lat", "osm_lon", "price_count", "user_count", "product_count", "proof_count", "created", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if osm_name (nullable) is None
        # and model_fields_set contains the field
        if self.osm_name is None and "osm_name" in self.model_fields_set:
            _dict['osm_name'] = None

        # set to None if osm_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.osm_display_name is None and "osm_display_name" in self.model_fields_set:
            _dict['osm_display_name'] = None

        # set to None if osm_tag_key (nullable) is None
        # and model_fields_set contains the field
        if self.osm_tag_key is None and "osm_tag_key" in self.model_fields_set:
            _dict['osm_tag_key'] = None

        # set to None if osm_tag_value (nullable) is None
        # and model_fields_set contains the field
        if self.osm_tag_value is None and "osm_tag_value" in self.model_fields_set:
            _dict['osm_tag_value'] = None

        # set to None if osm_address_postcode (nullable) is None
        # and model_fields_set contains the field
        if self.osm_address_postcode is None and "osm_address_postcode" in self.model_fields_set:
            _dict['osm_address_postcode'] = None

        # set to None if osm_address_city (nullable) is None
        # and model_fields_set contains the field
        if self.osm_address_city is None and "osm_address_city" in self.model_fields_set:
            _dict['osm_address_city'] = None

        # set to None if osm_address_country (nullable) is None
        # and model_fields_set contains the field
        if self.osm_address_country is None and "osm_address_country" in self.model_fields_set:
            _dict['osm_address_country'] = None

        # set to None if osm_address_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.osm_address_country_code is None and "osm_address_country_code" in self.model_fields_set:
            _dict['osm_address_country_code'] = None

        # set to None if osm_lat (nullable) is None
        # and model_fields_set contains the field
        if self.osm_lat is None and "osm_lat" in self.model_fields_set:
            _dict['osm_lat'] = None

        # set to None if osm_lon (nullable) is None
        # and model_fields_set contains the field
        if self.osm_lon is None and "osm_lon" in self.model_fields_set:
            _dict['osm_lon'] = None

        # set to None if price_count (nullable) is None
        # and model_fields_set contains the field
        if self.price_count is None and "price_count" in self.model_fields_set:
            _dict['price_count'] = None

        # set to None if user_count (nullable) is None
        # and model_fields_set contains the field
        if self.user_count is None and "user_count" in self.model_fields_set:
            _dict['user_count'] = None

        # set to None if product_count (nullable) is None
        # and model_fields_set contains the field
        if self.product_count is None and "product_count" in self.model_fields_set:
            _dict['product_count'] = None

        # set to None if proof_count (nullable) is None
        # and model_fields_set contains the field
        if self.proof_count is None and "proof_count" in self.model_fields_set:
            _dict['proof_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "osm_id": obj.get("osm_id"),
            "osm_type": obj.get("osm_type"),
            "osm_name": obj.get("osm_name"),
            "osm_display_name": obj.get("osm_display_name"),
            "osm_tag_key": obj.get("osm_tag_key"),
            "osm_tag_value": obj.get("osm_tag_value"),
            "osm_address_postcode": obj.get("osm_address_postcode"),
            "osm_address_city": obj.get("osm_address_city"),
            "osm_address_country": obj.get("osm_address_country"),
            "osm_address_country_code": obj.get("osm_address_country_code"),
            "osm_lat": obj.get("osm_lat"),
            "osm_lon": obj.get("osm_lon"),
            "price_count": obj.get("price_count"),
            "user_count": obj.get("user_count"),
            "product_count": obj.get("product_count"),
            "proof_count": obj.get("proof_count"),
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        return _obj


