# coding: utf-8

"""
    Open Food Facts open-prices REST API

    Open Prices API allows you to add product prices

    The version of the OpenAPI document: 0.0.0 (api)
    Contact: contact@openfoodfacts.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.product_full_source import ProductFullSource
from typing import Optional, Set
from typing_extensions import Self

class ProductFull(BaseModel):
    """
    ProductFull
    """ # noqa: E501
    id: StrictInt
    code: StrictStr
    source: Optional[ProductFullSource] = None
    product_name: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    product_quantity: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    product_quantity_unit: Optional[StrictStr] = None
    categories_tags: Optional[List[StrictStr]] = None
    brands: Optional[StrictStr] = None
    brands_tags: Optional[List[StrictStr]] = None
    labels_tags: Optional[List[StrictStr]] = None
    nutriscore_grade: Optional[StrictStr] = None
    ecoscore_grade: Optional[StrictStr] = None
    nova_group: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    unique_scans_n: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    price_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    location_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    user_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    proof_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    created: Optional[datetime] = None
    updated: datetime
    __properties: ClassVar[List[str]] = ["id", "code", "source", "product_name", "image_url", "product_quantity", "product_quantity_unit", "categories_tags", "brands", "brands_tags", "labels_tags", "nutriscore_grade", "ecoscore_grade", "nova_group", "unique_scans_n", "price_count", "location_count", "user_count", "proof_count", "created", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductFull from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['product_name'] = None

        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict['image_url'] = None

        # set to None if product_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.product_quantity is None and "product_quantity" in self.model_fields_set:
            _dict['product_quantity'] = None

        # set to None if product_quantity_unit (nullable) is None
        # and model_fields_set contains the field
        if self.product_quantity_unit is None and "product_quantity_unit" in self.model_fields_set:
            _dict['product_quantity_unit'] = None

        # set to None if brands (nullable) is None
        # and model_fields_set contains the field
        if self.brands is None and "brands" in self.model_fields_set:
            _dict['brands'] = None

        # set to None if nutriscore_grade (nullable) is None
        # and model_fields_set contains the field
        if self.nutriscore_grade is None and "nutriscore_grade" in self.model_fields_set:
            _dict['nutriscore_grade'] = None

        # set to None if ecoscore_grade (nullable) is None
        # and model_fields_set contains the field
        if self.ecoscore_grade is None and "ecoscore_grade" in self.model_fields_set:
            _dict['ecoscore_grade'] = None

        # set to None if nova_group (nullable) is None
        # and model_fields_set contains the field
        if self.nova_group is None and "nova_group" in self.model_fields_set:
            _dict['nova_group'] = None

        # set to None if unique_scans_n (nullable) is None
        # and model_fields_set contains the field
        if self.unique_scans_n is None and "unique_scans_n" in self.model_fields_set:
            _dict['unique_scans_n'] = None

        # set to None if price_count (nullable) is None
        # and model_fields_set contains the field
        if self.price_count is None and "price_count" in self.model_fields_set:
            _dict['price_count'] = None

        # set to None if location_count (nullable) is None
        # and model_fields_set contains the field
        if self.location_count is None and "location_count" in self.model_fields_set:
            _dict['location_count'] = None

        # set to None if user_count (nullable) is None
        # and model_fields_set contains the field
        if self.user_count is None and "user_count" in self.model_fields_set:
            _dict['user_count'] = None

        # set to None if proof_count (nullable) is None
        # and model_fields_set contains the field
        if self.proof_count is None and "proof_count" in self.model_fields_set:
            _dict['proof_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductFull from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "source": ProductFullSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "product_name": obj.get("product_name"),
            "image_url": obj.get("image_url"),
            "product_quantity": obj.get("product_quantity"),
            "product_quantity_unit": obj.get("product_quantity_unit"),
            "categories_tags": obj.get("categories_tags"),
            "brands": obj.get("brands"),
            "brands_tags": obj.get("brands_tags"),
            "labels_tags": obj.get("labels_tags"),
            "nutriscore_grade": obj.get("nutriscore_grade"),
            "ecoscore_grade": obj.get("ecoscore_grade"),
            "nova_group": obj.get("nova_group"),
            "unique_scans_n": obj.get("unique_scans_n"),
            "price_count": obj.get("price_count"),
            "location_count": obj.get("location_count"),
            "user_count": obj.get("user_count"),
            "proof_count": obj.get("proof_count"),
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        return _obj


